generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Comments {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  postId    Int
  userId    Int
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  meta_tags Json? @db.Json
  Posts     Posts    @relation(fields: [postId], references: [id], onDelete: Cascade, map: "Comments_ibfk_1")
  Users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Comments_ibfk_2")

  @@index([postId], map: "postId")
  @@index([userId], map: "userId")
}

model Posts {
  id        Int        @id @default(autoincrement())
  title     String     @db.VarChar(255)
  content   String     @db.Text
  userId    Int
  createdAt DateTime   @db.DateTime(0)
  updatedAt DateTime   @db.DateTime(0)
  category  String?
  Comments  Comments[]
  Users     Users      @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Posts_ibfk_1")

  @@index([userId], map: "userId")
}

model SequelizeMeta {
  name String @id @unique(map: "name") @db.VarChar(255)
}

model Users {
  id          Int        @id @default(autoincrement())
  firstName   String     @db.VarChar(255)
  lastName    String     @db.VarChar(255)
  email       String     @unique(map: "email") @db.VarChar(255)
  phoneNumber String     @default("0123456789") @db.VarChar(255)
  username    String     @default("") @db.VarChar(255)
  createdAt   DateTime   @db.DateTime(0)
  updatedAt   DateTime   @db.DateTime(0)
  city        String?    @default("") @db.VarChar(255)
  Comments    Comments[]
  Posts       Posts[]

  @@index([lastName], map: "idx_lastName")
}

model Bashar {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  email       String    @unique(map: "email") @db.VarChar(255)
  phonenumber String    @db.VarChar(15)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
}
